# Python Prooject setup
[project]
name = "example-etl"
version = "2024.0.0"
requires-python = "==3.12.5"
authors = [
  {name = "Arno Theron"}
]
readme = "README.md"

# Ruff setup
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "F",    # Pyflake checks
    "E",    # Pycodestyle errors
    "W",    # Pycodestyle warnings
    "I",    # Isort imports
    "N",    # pep8 naming conventions
    "ANN",  # flake8 type annotations
    "S",    # flake8 security checks
    "B",    # flake8 bugber (common bug and design issues)
    "A",    # flake8 builtins checks
    "COM",  # flake8 comma checks
    "C",    # flake8 comprehension checks
    "DTZ",  # flake8 datetime checks
    "ISC",  # flake8 string concat checks
    "ICN",  # flake8 import conventions
    "LOG",  # flake8 logging checks
    "PIE",  # flake8 misc lints
    "T20",  # flake8 no print statements allowed
    "Q",    # flake8 quote checks
    "RET",  # flake8 return checks
    "SIM",  # flake8 simplify rules
    "TCH",  # flake8 type checking
    "ARG",  # flake8 unused args
    "PTH",  # flake8 use pathlib instead os
    "PD",   # pandas checks
    "AIR",  # airflow checks
    "RUF",  # Ruff checks
    #"PL", # Pylint checks (not necessary atm)
]
ignore = [
    "RET504", # Ignore "unecessary" assignment before return
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
